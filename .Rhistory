setnames(lower, 'nGram', 'suffix')
setnames(lower, 'pKatzNGram', 'pKatzSuffix')
current <- merge(current, lower, all.x = TRUE)
current <- merge(current, lower, by = 'suffix', all.x = TRUE)
current[, pKatzSuffixSum :=  sum(pKatzSuffix), by = context]
current[, alphaDenominator := 1- pKatzSuffixSum]
current[,alpha := alphaNumerator / alphaDenominator]
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM15katzAlpha.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM15katzAlpha.R')
current <- loadObject(katz$counts[[x]])
lower <- loadObject(katz$counts[[x-1]])
setkey(current, context)
current[,pKatzNGramSum := sum(pKatzNGram), by = context]
current[,alpha := 1-pKatzNGramSum]
lower <- lower[,nGram, pKatzNGram]
setnames(lower, 'nGram', 'suffix')
setnames(lower, 'pKatzNGram', 'pKatzSuffix')
current <- merge(current, lower, by = 'suffix', all.x = TRUE)
current[, pKatzSuffixSum :=  sum(pKatzSuffix), by = context]
current[, alphaDenominator := 1- pKatzSuffixSum]
current[,alpha := alphaNumerator / alphaDenominator]
current[,alpha := alphaNumerator / alphaDenominator]
current <- loadObject(katz$counts[[x]])
lower <- loadObject(katz$counts[[x-1]])
# Compute numerator in alpha equation
setkey(current, context)
current[,pKatzNGramSum := sum(pKatzNGram), by = context]
current[,alphaNumerator := 1-pKatzNGramSum]
# Compute denominator in alpha equation
lower <- lower[,nGram, pKatzNGram]
setnames(lower, 'nGram', 'suffix')
setnames(lower, 'pKatzNGram', 'pKatzSuffix')
current <- merge(current, lower, by = 'suffix', all.x = TRUE)
current[, pKatzSuffixSum :=  sum(pKatzSuffix), by = context]
current[, alphaDenominator := 1- pKatzSuffixSum]
current[, alpha := alphaNumerator / alphaDenominator]
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM15katzAlpha.R')
katzAlpha(katz)
2:length(katz$counts
2:length(katz$counts
length(katz$counts)
seq(2:length(katz$counts))
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM15katzAlpha.R')
katzAlpha(katz)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM10.katzPipeline.R')
korpus <- lapply(seq(1:4), function(n) {
nGram = list()
nGram$directory <- file.path(directories$test, 'katz', 'corpus')
nGram$objName  <- paste0('ltcorpus', x)
nGram$fileName <- paste0('ltcorpus', x, '.txt')
nGram
}
korpus <- lapply(seq(1:4), function(n) {
nGram = list()
nGram$directory <- file.path(directories$test, 'katz', 'corpus')
nGram$objName  <- paste0('ltcorpus', x)
nGram$fileName <- paste0('ltcorpus', x, '.txt')
nGram
})
nGrams <- lapply(seq(1:4), function(n) {
nGram = list()
nGram$directory <- file.path(directories$test, 'katz', 'nGrams')
nGram$objName  <- paste0('ltcorpus', x)
nGram$fileName <- paste0('ltcorpus', x, '.RData')
nGram
})
korpus <- lapply(seq(1:4), function(n) {
nGram = list()
nGram$directory <- file.path(directories$test, 'katz', 'corpus')
nGram$objName  <- paste0('ltcorpus', x)
nGram$fileName <- paste0('ltcorpus', x, '.txt')
nGram
})
korpus <- lapply(seq(1:4), function(n) {
nGram = list()
nGram$directory <- file.path(directories$testingDir, 'katz', 'corpus')
nGram$objName  <- paste0('ltcorpus', x)
nGram$fileName <- paste0('ltcorpus', x, '.txt')
nGram
})
nGrams <- lapply(seq(1:4), function(n) {
nGram = list()
nGram$directory <- file.path(directories$testingDir, 'katz', 'nGrams')
nGram$objName  <- paste0('ltcorpus', x)
nGram$fileName <- paste0('ltcorpus', x, '.RData')
nGram
})
source('~/Data Science/Data Science Projects/PredictifyR-1.0/lab/createTestNGrams.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/lab/createTestNGrams.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/config/initEnvironment.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/lab/createTestNGrams.R')
seq(1:4)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/lab/createTestNGrams.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM14.katzProbabilities.R')
katzInit(katz, nGrams, regex)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-unigrams.Rdata")
View(katzUnigrams)
summaryCounts <- katzAbsCount(katz, nGrams)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM12.katzAbsCount.R')
summaryCounts <- katzAbsCount(katz, nGrams)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-bigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-quadgrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-trigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-unigrams.Rdata")
View(katzUnigrams)
katzInit(katz, nGrams, regex)
# Calculate absolute counts
summaryCounts <- katzAbsCount(katz, nGrams)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-bigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-quadgrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-trigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-unigrams.Rdata")
View(katzUnigrams)
View(katzBigrams)
View(katzQuadgrams)
seq_along(korpus)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/lab/createTestNGrams.R')
korpus <- lapply(seq(1:4), function(n) {
nGram = list()
nGram$directory <- file.path(directories$testingDir, 'katz', 'corpus')
nGram$objName  <- paste0('ltcorpus', n)
nGram$fileName <- paste0('ltcorpus', n, '.txt')
nGram
})
nGrams <- lapply(seq(1:4), function(n) {
nGram = list()
nGram$directory <- file.path(directories$testingDir, 'katz', 'nGrams')
nGram$objName  <- paste0('ltcorpus', n)
nGram$fileName <- paste0('ltcorpus', n, '.RData')
nGram
})
katzInit(katz, nGrams, regex)
summaryCounts <- katzAbsCount(katz, nGrams)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-bigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-quadgrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-trigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-unigrams.Rdata")
View(katzBigrams)
View(katzQuadgrams)
View(katzTrigrams)
View(katzUnigrams)
View(katzBigrams)
View(katzTrigrams)
View(katzQuadgrams)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM10.katzPipeline.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM13.katzAdjCount.R')
summaryCounts <- katzAdjCount(katz, discount = 0.5, directories)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-bigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-quadgrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-trigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-unigrams.Rdata")
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM13.katzAdjCount.R')
katzInit(katz, nGrams, regex)
# Calculate absolute counts
#summaryCounts <- katzAbsCount(katz, training$nGrams)
summaryCounts <- katzAbsCount(katz, nGrams)
# Calculate Adjusted Counts
summaryCounts <- katzAdjCount(katz, discount = 0.5, directories)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-bigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-quadgrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-trigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-unigrams.Rdata")
View(katzUnigrams)
View(katzBigrams)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM13.katzAdjCount.R')
katzInit(katz, nGrams, regex)
# Calculate absolute counts
#summaryCounts <- katzAbsCount(katz, training$nGrams)
summaryCounts <- katzAbsCount(katz, nGrams)
# Calculate Adjusted Counts
summaryCounts <- katzAdjCount(katz, discount = 0.5, directories)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM13.katzAdjCount.R')
katzInit(katz, nGrams, regex)
# Calculate absolute counts
#summaryCounts <- katzAbsCount(katz, training$nGrams)
summaryCounts <- katzAbsCount(katz, nGrams)
# Calculate Adjusted Counts
summaryCounts <- katzAdjCount(katz, discount = 0.5, directories)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-bigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-quadgrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-trigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-unigrams.Rdata")
View(katzUnigrams)
View(katzBigrams)
View(katzTrigrams)
View(katzQuadgrams)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM14.katzProbabilities.R')
katzProbabilities(katz)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM14.katzProbabilities.R')
katzProbabilities(katz)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-bigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-quadgrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-trigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-unigrams.Rdata")
View(katzUnigrams)
View(katzBigrams)
View(katzTrigrams)
View(katzQuadgrams)
View(katzUnigrams)
View(katzTrigrams)
View(katzBigrams)
View(katzQuadgrams)
View(katzTrigrams)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM10.katzPipeline.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM11.katzInit.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM13.katzAdjCount.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM13.katzAdjCount.R')
View(katzBigrams)
x <- 2
current <- loadObject(katz$counts[[x]])
current[,. (cContext := sum(r)), by = context]
View(current)
current[, cContext := sum(r), by = context]
View(current)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM12.katzAbsCount.R')
katzInit(katz, nGrams, regex)
# Calculate absolute counts
#summaryCounts <- katzAbsCount(katz, training$nGrams)
summaryCounts <- katzAbsCount(katz, nGrams)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-bigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-quadgrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-trigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-unigrams.Rdata")
View(katzUnigrams)
View(katzBigrams)
View(katzTrigrams)
View(katzQuadgrams)
summaryCounts <- katzAdjCount(katz, discount = 0.5, directories)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-bigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-quadgrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-trigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-unigrams.Rdata")
View(katzUnigrams)
View(katzBigrams)
View(katzQuadgrams)
lower <- loadObject(katz$counts[[x-1]])
View(lower)
current[, pKatzNGram := r / sum(r)]
# Compute katz suffix probabilities
lower <- loadObject(katz$counts[[x-1]])
lower[, nGram, pKatzNGram]
setnames(lower, nGram, suffix)
setnames(lower, pKatzNGram, pKatzSuffix)
setkey(current, suffix)
current <- merge(current, lower, by = suffix)
x <- 1
current <- loadObject(katz$counts[[x]])
current[, pKatzNGram := r / sum(r)]
katz$counts[[x]]$data <- current
saveObject(katz$counts[[x]])
x <- 2
current <- loadObject(katz$counts[[x]])
# Compute katz Observed nGram Probability
current[, pKatzNGram := cKatzNGram / cContext]
# Compute katz suffix probabilities
lower <- loadObject(katz$counts[[x-1]])
lower[, nGram, pKatzNGram]
setnames(lower, nGram, suffix)
setnames(lower, pKatzNGram, pKatzSuffix)
setkey(current, suffix)
current <- merge(current, lower, by = suffix)
setnames(lower, 'nGram', 'suffix')
setnames(lower, 'pKatzNGram', 'pKatzSuffix')
setkey(current, suffix)
current <- merge(current, lower, by = suffix)
current <- merge(current, lower, by = 'suffix')
View(current)
current[, pKatzNGramSum := sum(pKatzNGram), by = 'context']
# Compute sum of katz suffix probabilities by context
current[, pKatzSuffixSum := sum(pKatzSuffix), by = 'context']
View(current)
current[, alpha := ((1-pKatzNGramSum) / (1-pKatzSuffixSum))]
View(current)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM14.katzProbabilities.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM14.katzAlpha.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM10.katzPipeline.R')
# Meta data for test corpus and ngrams
korpus <- lapply(seq(1:4), function(n) {
nGram = list()
nGram$directory <- file.path(directories$testingDir, 'katz', 'corpus')
nGram$objName  <- paste0('ltcorpus', n)
nGram$fileName <- paste0('ltcorpus', n, '.txt')
nGram
})
nGrams <- lapply(seq(1:4), function(n) {
nGram = list()
nGram$directory <- file.path(directories$testingDir, 'katz', 'nGrams')
nGram$objName  <- paste0('ltcorpus', n)
nGram$fileName <- paste0('ltcorpus', n, '.RData')
nGram
})
# Initialize Katz Tables
katzInit(katz, nGrams, regex)
# Calculate absolute counts
#summaryCounts <- katzAbsCount(katz, training$nGrams)
summaryCounts <- katzAbsCount(katz, nGrams)
# Calculate Adjusted Counts
summaryCounts <- katzAdjCount(katz, discount = 0.5, directories)
# Calculate alpha weights
katzAlpha(katz)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-trigrams.Rdata")
View(katzTrigrams)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-bigrams.Rdata")
View(katzBigrams)
View(katzBigrams)
katzInit(katz, nGrams, regex)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-trigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-bigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-quadgrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-unigrams.Rdata")
View(katzUnigrams)
View(katzTrigrams)
View(katzQuadgrams)
View(katzBigrams)
summaryCounts <- katzAbsCount(katz, nGrams)
summaryCounts <- katzAdjCount(katz, discount = 0.5, directories)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-bigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-quadgrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-trigrams.Rdata")
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-unigrams.Rdata")
View(katzBigrams)
View(katzQuadgrams)
View(katzTrigrams)
View(katzUnigrams)
katzAlpha(katz)
lower[, nGram, pKatzNGram]
x <- 3
current <- loadObject(katz$counts[[x]])
lower <- loadObject(katz$counts[[x-1]])
lower <- lower[, nGram, pKatzNGram]
setnames(lower, 'nGram', 'suffix')
setnames(lower, 'pKatzNGram', 'pKatzSuffix')
setkey(current, suffix)
current <- merge(current, lower, by = 'suffix')
View(current)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM14.katzAlpha.R')
# Initialize Katz Tables
katzInit(katz, nGrams, regex)
# Calculate absolute counts
#summaryCounts <- katzAbsCount(katz, training$nGrams)
summaryCounts <- katzAbsCount(katz, nGrams)
# Calculate Adjusted Counts
summaryCounts <- katzAdjCount(katz, discount = 0.5, directories)
# Calculate alpha weights
katzAlpha(katz)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM0A.mknEvaluate.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM16.katzEvaluate.R')
View(katzQuadgrams)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-quadgrams.Rdata")
View(katzQuadgrams)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM16.katzEvaluate.R')
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-unigrams.Rdata")
View(katzUnigrams)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/counts/katz-quadgrams.Rdata")
View(katzQuadgrams)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM15.katzPrune.R')
modelSize <- katzPrune(katz, directories)
View(modelSize)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM10.katzPipeline.R')
message(paste('...loading language model'))
model <- lapply(seq_along(katz$model), function(x) {
loadObject(katz$model[[x]])
})
n <- 4
alphas <- model[[n]][, context, alpha]
context <- 'sell the book'
alpha <- model[[n]][, context, alpha][, context = context]
alpha <- model[[n]][context = context, context, alpha]
alpha <- model[[n]][context == context, context, alpha]
prefix <- 'sell the book'
alpha <- model[[n]][context == prefix, context, alpha]
View(alpha)
alpha <- model[[n]][context == prefix, alpha, by = context]
View(alpha)
alpha <- model[[n]][context == prefix, alpha, by = context]$alpha
tail <- 'the book EOS'
pKatz <- model[[n]][suffix == tail, pKatzSuffix, by = suffix]$pKatzSuffix
pKatz <- model[[n]][suffix == tail, pKatzSuffix, by = suffix]$pKatzSuffix[1]
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM16.katzEvaluate.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM10.katzPipeline.R')
test <- list(
directory = file.path(directories$testingDir, 'katz', 'test'),
objName = 'katzTestData',
fileName = 'test.txt'
)
document <- readFile(test)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/config/initEnvironment.R')
document <- readFile(test)
sentence <- docment[1]
sentence <- document[1]
tokens <- unlist(quanteda::tokenize(sentence, what = 'word'))
x <- 1
ngram <- paste0(tokens[x:(x+3)], collapse = ' ')
katz$mOrder
n <- 4
s <- model[[n]][ nGram = ngram, pKatzNGram]
s <- model[[n]][ nGram == ngram, pKatzNGram]
length(s)
s <- model[[n]][ nGram == 'ngram', pKatzNGram]
length(s)
prefix <- gsub(regex$context[[n-1]], "\\1", ngram, perl = TRUE)
tail <- gsub(regex$suffix[[n-1]], "\\1", ngram, perl = TRUE)
pKatz <- model[[n]][suffix == tail, pKatzSuffix, by = suffix]$pKatzSuffix[1]
pKatz <- model[[n]][suffix == 'tail', pKatzSuffix, by = suffix]$pKatzSuffix[1]
length(pKatz)
pKatz > 0
alpha <- model[[n]][context == prefix, alpha, by = context]$alpha[1]
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM16.katzEvaluate.R')
# Initialize Katz Tables
katzInit(katz, nGrams, regex)
# Calculate absolute counts
#summaryCounts <- katzAbsCount(katz, training$nGrams)
summaryCounts <- katzAbsCount(katz, nGrams)
# Calculate Adjusted Counts
summaryCounts <- katzAdjCount(katz, discount = 0.5, directories)
# Calculate alpha weights
katzAlpha(katz)
# Prune and publish language model
modelSize <- katzPrune(katz, directories)
# Evaluate language model
evaluation <- katzEvaluate(katz, test, sents = NULL, directories)
evaluation <- katzEvaluate(katz, training, test, sents = NULL, directories)
s <- model[[n]][ nGram == ngram, pKatzNGram]
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM16.katzEvaluate.R')
evaluation <- katzEvaluate(katz, training, test, sents = NULL, directories)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM16.katzEvaluate.R')
evaluation <- katzEvaluate(katz, training, test, sents = NULL, directories)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM16.katzEvaluate.R')
evaluation <- katzEvaluate(katz, training, test, sents = NULL, directories)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM16.katzEvaluate.R')
evaluation <- katzEvaluate(katz, training, test, sents = NULL, directories)
'ngram', 'sell the house EOS'
ngram <-  'sell the house EOS'
s <- model[[n]][ nGram == ngram, pKatzNGram]
(length(s) > 0 )
prefix <- gsub(regex$context[[n]], "\\1", ngram, perl = TRUE)
n <- 1
prefix <- gsub(regex$context[[n]], "\\1", ngram, perl = TRUE)
n <-3
prefix <- gsub(regex$context[[n]], "\\1", ngram, perl = TRUE)
tail <- gsub(regex$suffix[[n]], "\\1", ngram, perl = TRUE)
pKatz <- model[[n+1]][suffix == tail, pKatzSuffix, by = suffix]$pKatzSuffix[1]
alpha <- model[[n+1]][context == prefix, alpha, by = context]$alpha[1]
is.numeric(pKatz)
is.numeric(alpha)
length(alpha)
is.na(alpha)
!is.na(pKatz)
!is.na(alpha)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM16.katzEvaluate.R')
evaluation <- katzEvaluate(katz, training, test, sents = NULL, directories)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/model/katz-unigrams.Rdata")
View(katzUnigrams)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/lab/createTestNGrams.R')
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM16.katzEvaluate.R')
katzInit(katz, nGrams, regex)
# Calculate absolute counts
#summaryCounts <- katzAbsCount(katz, training$nGrams)
summaryCounts <- katzAbsCount(katz, nGrams)
# Calculate Adjusted Counts
summaryCounts <- katzAdjCount(katz, discount = 0.5, directories)
# Calculate alpha weights
katzAlpha(katz)
# Prune and publish language model
modelSize <- katzPrune(katz, directories)
# Evaluate language model
evaluation <- katzEvaluate(katz, training, test, sents = NULL, directories)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/model/katz-unigrams.Rdata")
View(katzUnigrams)
load("~/Data Science/Data Science Projects/PredictifyR-1.0/lm/katz/alpha/model/katz-bigrams.Rdata")
View(katzBigrams)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM16.katzEvaluate.R')
katzInit(katz, nGrams, regex)
# Calculate absolute counts
#summaryCounts <- katzAbsCount(katz, training$nGrams)
summaryCounts <- katzAbsCount(katz, nGrams)
# Calculate Adjusted Counts
summaryCounts <- katzAdjCount(katz, discount = 0.5, directories)
# Calculate alpha weights
katzAlpha(katz)
# Prune and publish language model
modelSize <- katzPrune(katz, directories)
# Evaluate language model
evaluation <- katzEvaluate(katz, training, test, sents = NULL, directories)
ngram <- 'BOS book the dance'
n <- 4
s <- model[[n]][ nGram == ngram, pKatzNGram]
n <- 3
prefix <- gsub(regex$context[[n]], "\\1", ngram, perl = TRUE)
tail <- gsub(regex$suffix[[n]], "\\1", ngram, perl = TRUE)
pKatz <- model[[n+1]][suffix == tail, pKatzSuffix, by = suffix]$pKatzSuffix[1]
alpha <- model[[n+1]][context == prefix, alpha, by = context]$alpha[1]
(!is.na(alpha) & !is.na(pKatz))
ngram <- tail
n <- 2
prefix <- gsub(regex$context[[n]], "\\1", ngram, perl = TRUE)
tail <- gsub(regex$suffix[[n]], "\\1", ngram, perl = TRUE)
pKatz <- model[[n+1]][suffix == tail, pKatzSuffix, by = suffix]$pKatzSuffix[1]
alpha <- model[[n+1]][context == prefix, alpha, by = context]$alpha[1]
n <- 1
ngram <- tail
prefix <- gsub(regex$context[[n]], "\\1", ngram, perl = TRUE)
tail <- gsub(regex$suffix[[n]], "\\1", ngram, perl = TRUE)
pKatz <- model[[n+1]][suffix == tail, pKatzSuffix, by = suffix]$pKatzSuffix[1]
alpha <- model[[n+1]][context == prefix, alpha, by = context]$alpha[1]
(!is.na(alpha) & !is.na(pKatz))
(is.na(alpha))
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM16.katzEvaluate.R')
evaluation <- katzEvaluate(katz, training, test, sents = NULL, directories)
d <- evaluation$detail
View(d)
source('~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM10.katzPipeline.R')
