{
    "collab_server" : "",
    "contents" : "## ---- schema\n#' Predictify Variable Schema\n#' This script contains the constant variables used throughout the project\n#' \n#' \n\n# Regex Patterns\nregexPatterns = list(\n  words           = \"\\\\b[a-zA-Z]+\\\\b\",\n  longWords       = \"\\\\b[a-zA-Z0-9]{41,}\\\\b\",\n  alphabetic      = \"[[:alpha:]]\",\n  nonAlphabetic   = \"[^[:alpha:]]\",\n  digits          = '[[:digit:]]',\n  emails          = \"[a-zA-Z0-9\\\\-_~]+(\\\\.[a-zA-Z0-9\\\\-_~]+)*@[a-zA-Z0-9\\\\-_~]+(\\\\.[a-zA-Z0-9\\\\-_~]+)*\\\\.[a-zA-Z]{2,}\",\n  urls            = \"(?:(?:https?:\\\\/\\\\/)|(?:www\\\\.))[-a-zA-Z0-9@:%._\\\\+~#=]{2,256}\\\\.[a-z]{2,4}\\\\b(?:[-a-zA-Z0-9@:%_\\\\+.~#?&/=]*)\",\n  twitter         = '\\\\B#\\\\w*[a-zA-Z]+\\\\w*',\n  punct           = \"[[:punct:]]\",\n  punctSansMain   = \"(?![.?!'])[[:punct:]]\",\n  punctSansApos   = \"(?!['])[[:punct:]]\",\n  symbols         = \"[-^*()_|~={}\\\\[\\\\]:;<>\\\\/]\",\n  control         = '[[:cntrl:]]',\n  nonAscii        = '[^[:ascii:]]',\n  nonPrintable    = '[^[:print:]]',\n  contractions    = \"^([^']*?)(')([^']*?)$\",\n  hyphens         = '[-]',\n  hyphenatedWords = \"(?=\\\\S*[-])(^[a-zA-Z-]+$)\",\n  repeatedChars   = '(.)\\\\1{2,}',\n  repeatedPattern = '(.+?)\\\\1+',\n  apostrophe      = '[\\']',\n  strayApostrophe = \"\\\\s*'\\\\B|\\\\B'\\\\s*\",\n  singles         = '\\\\b[b-hj-z]{1}\\\\b',\n  whiteSpace      = \"\\\\s+\",\n  abbreviations   = \"(?:[a-zA-Z]\\\\.){2,}\",\n  context = list(\n    bigrams   = \"^((\\\\S+\\\\s+){0}\\\\S+).*$\",\n    trigrams  = \"^((\\\\S+\\\\s+){1}\\\\S+).*$\",\n    quadgrams = \"^((\\\\S+\\\\s+){2}\\\\S+).*$\",\n    quadGrams = \"^((\\\\S+\\\\s+){3}\\\\S+).*$\"\n  ),\n  suffix = list(\n    bigrams = \"^.*\\\\s+((?:\\\\S+\\\\s+){0}\\\\S+)$\",\n    trigrams = \"^.*\\\\s+((?:\\\\S+\\\\s+){1}\\\\S+)$\",\n    quadgrams = \"^.*\\\\s+((?:\\\\S+\\\\s+){2}\\\\S+)$\",\n    quadGrams = \"^.*\\\\s+((?:\\\\S+\\\\s+){3}\\\\S+)$\"\n  )\n) # end of regexPatterns\n\npos <- list(\n  tags = c(\"IN\",\t\"JJ\",\t\"JJR\",\t\"JJS\",\t\"NN\", \"NNS\",\t\"NP\",\t\"NPS\",\t\"RB\",\t\"RBR\",\t\n           \"VB\",\t\"VBD\",\t\"VBG\",\t\"VBN\",\t\"VBP\",\t\"VBZ\",\t\"VD\",\t\"VDD\",\t\"VDG\",\t\n           \"VDN\",\t\"VDP\",\t\"VDZ\",\t\"VH\",\t\"VHD\",\t\"VHG\",\t\"VHN\",\t\"VHP\",\t\"VHZ\",\t\n           \"VV\",\t\"VVD\",\t\"VVG\",\t\"VVN\",\t\"VVP\",\t\"VVZ\",\t\"CC\",\t\"DT\",\t\"MD\",\t\"PRP\",\t\n           \"PP$\",\t\"RBS\",\t\"RP\",\t\"SENT\",\t\"WDT\",\t\"WP\",\t\"WP$\",\t\"WRB\",\t\"FW\",\n           \"NNP\", \"NNPS\", \"PRP$\", \"POS\"),\n  desc = c(\"Preposition/Subord. Conj.\",\t\"Adjective\",\t\"Adjective, Comparative\",\t\n           \"Adjective, Superlative\",\t\"Noun, Singular Or Mass\",\t\"Noun Plural\",\t\n           \"Proper Noun, Singular\",\t\"Proper Noun, Plural\",\t\"Adverb\",\t\n           \"Adverb, Comparative\",\t\"Verb Be, Base Form\",\t\"Verb Be, Past\",\t\n           \"Verb Be, Gerund/Participle\",\t\"Verb Be, Past Participle\",\t\n           \"Verb Be, Pres Non-3Rd P.\",\t\"Verb Be, Pres, 3Rd P. Sing\",\t\n           \"Verb Do, Base Form\",\t\"Verb Do, Past\",\t\"Verb Do Gerund/Participle\",\t\n           \"Verb Do, Past Participle\",\t\"Verb Do, Pres, Non-3Rd Per.\",\t\n           \"Verb Do, Pres, 3Rd Per.Sing\",\t\"Verb Have, Base Form\",\t\n           \"Verb Have, Past\",\t\"Verb Have, Gerund/Participle\",\t\n           \"Verb Have, Past Participle\",\t\"Verb Have, Pres Non-3Rd Per.\",\t\n           \"Verb Have, Pres 3Rd Per.Sing\",\t\"Verb, Base Form\",\t\n           \"Verb, Past Tense\",\t\"Verb, Gerund/Participle\",\t\n           \"Verb, Past Participle\",\t\"Verb, Present, Non-3Rd P.\",\t\n           \"Verb, Present 3D P. Sing.\",\t\"Coordinating Conjunction\",\t\n           \"Determiner\",\t\"Modal\",\t\"Personal Pronoun\",\t\"Possessive Pronoun\",\t\n           \"Adverb, Superlative\",\t\"Particle\",\t\"End Punctuation\",\t\"Wh-Determiner\",\t\n           \"Wh-Pronoun\",\t\"Possessive Wh-Pronoun\",\t\"Wh-Abverb\",\t\"Foreign Word\",\n           \"Proper Noun Singular\", \"Proper Noun Plural\", \"Possessive Pronoun\",\n           \"Possessive Ending\"),\n  category = c(\"Function\",\t\"Content\",\t\"Content\",\t\"Content\",\t\"Content\",\t\"Content\",\n               \"Content\",\t\"Content\",\t\"Content\",\t\"Content\",\t\"Function\",\t\"Function\",\t\n               \"Function\",\t\"Function\",\t\"Function\",\t\"Function\",\t\"Function\",\t\"Function\",\t\n               \"Function\",\t\"Function\",\t\"Function\",\t\"Function\",\t\"Function\",\t\"Function\",\n               \"Function\",\t\"Function\",\t\"Function\",\t\"Function\",\t\"Content\",\t\"Content\",\t\n               \"Content\",\t\"Content\",\t\"Content\",\t\"Content\",\t\"Function\",\t\"Function\",\t\n               \"Function\",\t\"Function\",\t\"Function\",\t\"Function\",\t\"Function\",\t\"Function\",\t\n               \"Function\",\t\"Function\",\t\"Function\",\t\"Function\",\t\"X\", \"Content\", \"Content\",\n               \"Content\", \"Content\"),\n  study = c(TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE,\n            TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE,\n            FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,\n            FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE,\n            FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,\n            FALSE)\n)\n\nposTags <- data.frame(Category = pos$category, Tag = pos$tags, \n                      Description = pos$desc, Study = pos$study)\n\nselectPOSTAgs <- c(\"IN\",\t\"NN\",\t\"NNS\",\t\"NNP\",\t\"NNPS\", \"POS\",\t\"PRP\",\t\"PRP$\", \n                   \"VB\",\t\"VBD\",\t\"VBG\",\t\"VBN\",\t\"VBZ\",\t\"WP\",\t\"WP$\",\t\"WRB\")\n\n#' ## Project Directory Structure\ndirectories <- list(\n  analysisDir        = './analysis',\n  libDir             =\t'./lib',\n  sourceDir          =\t'./src',\n  configDir          = './config',\n  logsDir            = './logs',\n  labsDir            = './lab',\n  referenceDataDir   = './data/referenceData',\n  rawCorpus          = './data/raw',\n  devData            = './data/development',\n  reshapedCorpus     = './data/reshaped',\n  cleanCorpus        = './data/clean',\n  pilotCorpus        = './data/pilot',\n  trainingCorpora    = './data/training',\n  validationCorpora  = './data/validation',\n  testCorpora        = './data/test',\n  lm                 = './lm',\n  testingDir         = './test'\n)\n# End of directories\n\nreferenceFiles  = list(\n  abbreviations  = list(\n    url          = \"https://raw.githubusercontent.com/j2scode/PredictifyR/master/data/referenceData/abbreviations.csv\",\n    directory    = directories$referenceDataDir,\n    fileName     = 'abbreviations.csv', \n    objName      = 'abbreviations',\n    fileType     = 'csv',\n    columns      = c(\"key\", \"value\")\n  ),\n  emoticons  = list(\n    url          = \"https://raw.githubusercontent.com/j2scode/PredictifyR/master/data/referenceData/emoticons.csv\",\n    directory    = directories$referenceDataDir,\n    fileName     = 'emoticons.csv',\n    objName      = 'emoticons',\n    fileType     = 'csv',\n    columns      = c(\"key\")\n  ),\n  badWordsFile   = list(\n    url          = \"https://raw.githubusercontent.com/j2scode/PredictifyR/master/data/referenceData/bad-words.csv\",\n    directory    = directories$referenceDataDir,\n    fileName     = 'bad-words.csv', \n    objName      = 'badWordsFile',\n    fileType     = 'csv',\n    columns      = c(\"key\")\n  ),\n  contractions   = list(\n    url          = \"https://raw.githubusercontent.com/j2scode/PredictifyR/master/data/referenceData/contractions.csv\",\n    directory    = directories$referenceDataDir,\n    fileName     = 'contractions.csv',\n    objName      = 'contractions',\n    fileType     = 'csv',\n    columns      = c(\"key\", \"value\")\n  ),\n  corrections   = list(\n    url          = \"https://raw.githubusercontent.com/j2scode/PredictifyR/master/data/referenceData/corrections.csv\",\n    directory    = directories$referenceDataDir,\n    fileName     = 'corrections.csv',\n    objName      = 'corrections',\n    fileType     = 'csv',\n    columns      = c(\"key\", \"value\")\n  )\n) # end of reference files\n\nregisters <- list(\n  blogs = list(\n    fileDesc = 'Blogs Register',\n    fileName  = 'en_US.blogs.txt',\n    objName = 'blogsRegister'\n  ),\n  news = list(\n    fileDesc = 'News Register',\n    fileName  = 'en_US.news.txt',\n    objName = 'newsRegister'\n  ),\n  twitter = list(\n    fileDesc = 'Twitter Register',\n    fileName  = 'en_US.twitter.txt',\n    objName = 'twitterRegister'\n  )\n)\n\ntriGrams <- list(\n  unigrams = list(\n    fileDesc = 'Unigrams',\n    fileName = 'unigrams.Rdata',\n    objName = 'unigrams'\n  ),\n  bigrams = list(\n    fileDesc = 'Bigrams',\n    fileName = 'bigrams.Rdata',\n    objName = 'bigrams'\n  ),\n  trigrams = list(\n    fileDesc = 'Trigrams',\n    fileName = 'trigrams.Rdata',\n    objName = 'trigrams'\n  )\n)\n\ntriGramText <- list(\n  unigrams = list(\n    fileDesc = 'Unigrams',\n    fileName = 'unigrams.txt',\n    objName = 'unigrams'\n  ),\n  bigrams = list(\n    fileDesc = 'Bigrams',\n    fileName = 'bigrams.txt',\n    objName = 'bigrams'\n  ),\n  trigrams = list(\n    fileDesc = 'Trigrams',\n    fileName = 'trigrams.txt',\n    objName = 'trigrams'\n  )\n)\n\nquadGrams <- list(\n  unigrams = list(\n    fileDesc = 'Unigrams',\n    fileName = 'unigrams.Rdata',\n    objName = 'unigrams'\n  ),\n  bigrams = list(\n    fileDesc = 'Bigrams',\n    fileName = 'bigrams.Rdata',\n    objName = 'bigrams'\n  ),\n  trigrams = list(\n    fileDesc = 'Trigrams',\n    fileName = 'trigrams.Rdata',\n    objName = 'trigrams'\n  ),\n  quadgrams = list(\n    fileDesc = 'Quadgrams',\n    fileName = 'quadgrams.Rdata',\n    objName = 'quadgrams'\n  )\n)\n\nquadGramText <- list(\n  unigrams = list(\n    fileDesc = 'Unigrams',\n    fileName = 'unigrams.txt',\n    objName = 'unigrams'\n  ),\n  bigrams = list(\n    fileDesc = 'Bigrams',\n    fileName = 'bigrams.txt',\n    objName = 'bigrams'\n  ),\n  trigrams = list(\n    fileDesc = 'Trigrams',\n    fileName = 'trigrams.txt',\n    objName = 'trigrams'\n  ),\n  quadgrams = list(\n    fileDesc = 'quadGrams',\n    fileName = 'quadGrams.txt',\n    objName = 'quadGrams'\n  )\n)\n\n# Corpora meta data \ncorpora = list(\n  raw = list(\n    corpusName  = 'Raw Corpus',\n    directory   = directories$rawCorpus,\n    source      = list(\n      url           = 'http://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip',\n      downloadPath  = 'data/download/HC-Corpus.zip',\n      zipPath       = \"C:\\\\Users\\\\John\\\\Documents\\\\Data Science\\\\Data Science Projects\\\\PredictifyR\\\\data\\\\download\\\\HC-Corpus.zip\",\n      unZipDir      = directories$rawCorpus,\n      unZipfiles    = c(file.path('final/en_US/en_US.blogs.txt'),\n                        file.path('final/en_US/en_US.news.txt'),\n                        file.path('final/en_US/en_US.twitter.txt'))),\n    documents = lapply(seq_along(registers), function(r) {\n      d <- list()\n      d$directory <- directories$rawCorpus\n      d$fileName <- registers[[r]]$fileName\n      d$fileDesc <- registers[[r]]$fileDesc\n      d$objName  <- registers[[r]]$objName\n      d\n    })\n  ), # end of raw\n  reshaped = list(\n    corpusName = 'Reshaped Data',\n    directory  = directories$reshapedCorpus,\n    fileName = 'reshaped-data',\n    objName = 'reshapedData',\n    documents = lapply(seq_along(registers), function(r) {\n      d <- list()\n      d$directory <- directories$reshapedCorpus\n      d$fileName <- registers[[r]]$fileName\n      d$fileDesc <- registers[[r]]$fileDesc\n      d$objName  <- registers[[r]]$objName\n      d\n    })\n  ), # end of reshaped\n  clean = list(\n    corpusName = 'Clean Corpus',\n    directory  = directories$cleanCorpus,\n    fileName = 'clean-corpus',\n    objName = 'cleanCorpus',\n    documents = lapply(seq_along(registers), function(r) {\n      d <- list()\n      d$directory <- directories$cleanCorpus\n      d$fileName <- registers[[r]]$fileName\n      d$fileDesc <- registers[[r]]$fileDesc\n      d$objName  <- registers[[r]]$objName\n      d\n    })\n  ), # end of clean\n  pilot = list(\n    corpusName = 'Pilot Corpus',\n    documents = lapply(seq_along(registers), function(r) {\n      d <- list()\n      d$directory <- file.path(directories$pilotCorpus, 'documents')\n      d$fileName <- registers[[r]]$fileName\n      d$fileDesc <- registers[[r]]$fileDesc\n      d$objName  <- registers[[r]]$objName\n      d\n    }),\n    pos = lapply(seq_along(registers), function(r) {\n      p <- list()\n      p$directory <- file.path(directories$pilotCorpus, 'pos')\n      p$fileName <- registers[[r]]$fileName\n      p$fileDesc <- registers[[r]]$fileDesc\n      p$objName  <- registers[[r]]$objName\n      p\n    }),\n    nGrams = lapply(seq_along(quadGrams), function(n) {\n      nGram <- list()\n      nGram$directory <- file.path(directories$pilotCorpus, 'nGrams')\n      nGram$objName <- quadGrams[[n]]$objName\n      nGram$fileName <- quadGrams[[n]]$fileName\n      nGram$fileDesc <- quadGrams[[n]]$fileDesc\n      nGram\n    })\n  ),\n  training = list(\n    alpha = list(\n      corpusName = 'Training Set Alpha',\n      directory = file.path(directories$trainingCorpora, 'alpha'),\n      fileName = 'training-set-alpha',\n      objName = 'trainingSetAlpha',\n      pct = 10,\n      documents = lapply(seq_along(registers), function(r) {\n        d <- list()\n        d$directory <- file.path(directories$trainingCorpora, 'alpha', 'documents')\n        d$fileName <- registers[[r]]$fileName\n        d$fileDesc <- registers[[r]]$fileDesc\n        d$objName  <- registers[[r]]$objName\n        d\n      }),\n      processed = lapply(seq_along(quadGramText), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$trainingCorpora, 'alpha', 'processed')\n        nGram$objName <- quadGramText[[n]]$objName\n        nGram$fileName <- quadGramText[[n]]$fileName\n        nGram$fileDesc <- quadGramText[[n]]$fileDesc\n        nGram\n      }),\n      nGrams = lapply(seq_along(quadGrams), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$trainingCorpora, 'alpha', 'nGrams')\n        nGram$objName <- quadGrams[[n]]$objName\n        nGram$fileName <- quadGrams[[n]]$fileName\n        nGram$fileDesc <- quadGrams[[n]]$fileDesc\n        nGram\n      })\n    ),\n    beta = list(\n      corpusName = 'Training Set Beta',\n      directory = file.path(directories$trainingCorpora, 'beta'),\n      fileName = 'training-set-beta',\n      objName = 'trainingSetBeta',\n      pct = 20,\n      documents = lapply(seq_along(registers), function(r) {\n        d <- list()\n        d$directory <- file.path(directories$trainingCorpora, 'beta', 'documents')\n        d$fileName <- registers[[r]]$fileName\n        d$fileDesc <- registers[[r]]$fileDesc\n        d$objName  <- registers[[r]]$objName\n        d\n      }),\n      processed = lapply(seq_along(quadGramText), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$trainingCorpora, 'beta', 'processed')\n        nGram$objName <- quadGramText[[n]]$objName\n        nGram$fileName <- quadGramText[[n]]$fileName\n        nGram$fileDesc <- quadGramText[[n]]$fileDesc\n        nGram\n      }),\n      nGrams = lapply(seq_along(quadGrams), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$trainingCorpora, 'beta', 'nGrams')\n        nGram$objName <- quadGrams[[n]]$objName\n        nGram$fileName <- quadGrams[[n]]$fileName\n        nGram$fileDesc <- quadGrams[[n]]$fileDesc\n        nGram\n      })\n    ),\n    gamma = list(\n      corpusName = 'Training Set Gamma',\n      directory = file.path(directories$trainingCorpora, 'gamma'),\n      fileName = 'training-set-gamma',\n      objName = 'trainingSetGamma',\n      pct = 35,\n      documents = lapply(seq_along(registers), function(r) {\n        d <- list()\n        d$directory <- file.path(directories$trainingCorpora, 'gamma', 'documents')\n        d$fileName <- registers[[r]]$fileName\n        d$fileDesc <- registers[[r]]$fileDesc\n        d$objName  <- registers[[r]]$objName\n        d\n      }),\n      processed = lapply(seq_along(quadGramText), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$trainingCorpora, 'gamma', 'processed')\n        nGram$objName <- quadGramText[[n]]$objName\n        nGram$fileName <- quadGramText[[n]]$fileName\n        nGram$fileDesc <- quadGramText[[n]]$fileDesc\n        nGram\n      }),\n      nGrams = lapply(seq_along(quadGrams), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$trainingCorpora, 'gamma', 'nGrams')\n        nGram$objName <- quadGrams[[n]]$objName\n        nGram$fileName <- quadGrams[[n]]$fileName\n        nGram$fileDesc <- quadGrams[[n]]$fileDesc\n        nGram\n      })\n    ),\n    delta = list(\n      corpusName = 'Training Set Delta',\n      directory = file.path(directories$trainingCorpora, 'delta'),\n      fileName = 'training-set-delta',\n      objName = 'trainingSetDelta',\n      pct = 50,\n      documents = lapply(seq_along(registers), function(r) {\n        d <- list()\n        d$directory <- file.path(directories$trainingCorpora, 'delta', 'documents')\n        d$fileName <- registers[[r]]$fileName\n        d$fileDesc <- registers[[r]]$fileDesc\n        d$objName  <- registers[[r]]$objName\n        d\n      }),\n      processed = lapply(seq_along(quadGramText), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$trainingCorpora, 'delta', 'processed')\n        nGram$objName <- quadGramText[[n]]$objName\n        nGram$fileName <- quadGramText[[n]]$fileName\n        nGram$fileDesc <- quadGramText[[n]]$fileDesc\n        nGram\n      }),\n      nGrams = lapply(seq_along(quadGrams), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$trainingCorpora, 'delta', 'nGrams')\n        nGram$objName <- quadGrams[[n]]$objName\n        nGram$fileName <- quadGrams[[n]]$fileName\n        nGram$fileDesc <- quadGrams[[n]]$fileDesc\n        nGram\n      })\n    )\n  ), # end of training\n  validation = list(\n    alpha = list(\n      corpusName = 'Validation Set Alpha',\n      directory = file.path(directories$validationCorpora, 'alpha'),\n      fileName = 'validation-set-alpha',\n      objName = 'validationSetAlpha',\n      documents = lapply(seq_along(registers), function(r) {\n        d <- list()\n        d$directory <- file.path(directories$validationCorpora, 'alpha', 'documents')\n        d$fileName <- registers[[r]]$fileName\n        d$fileDesc <- registers[[r]]$fileDesc\n        d$objName  <- registers[[r]]$objName\n        d\n      }),\n      processed = lapply(seq_along(quadGramText), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$validationCorpora, 'alpha', 'processed')\n        nGram$objName <- quadGramText[[n]]$objName\n        nGram$fileName <- quadGramText[[n]]$fileName\n        nGram$fileDesc <- quadGramText[[n]]$fileDesc\n        nGram\n      }),\n      nGrams = lapply(seq_along(quadGrams), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$validationCorpora, 'alpha', 'nGrams')\n        nGram$objName <- quadGrams[[n]]$objName\n        nGram$fileName <- quadGrams[[n]]$fileName\n        nGram$fileDesc <- quadGrams[[n]]$fileDesc\n        nGram\n      })\n    ),\n    beta = list(\n      corpusName = 'Validation Set Beta',\n      directory = file.path(directories$validationCorpora, 'beta'),\n      fileName = 'validation-set-beta',\n      objName = 'validationSetBeta',\n      documents = lapply(seq_along(registers), function(r) {\n        d <- list()\n        d$directory <- file.path(directories$validationCorpora, 'beta', 'documents')\n        d$fileName <- registers[[r]]$fileName\n        d$fileDesc <- registers[[r]]$fileDesc\n        d$objName  <- registers[[r]]$objName\n        d\n      }),\n      processed = lapply(seq_along(quadGramText), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$validationCorpora, 'beta', 'processed')\n        nGram$objName <- quadGramText[[n]]$objName\n        nGram$fileName <- quadGramText[[n]]$fileName\n        nGram$fileDesc <- quadGramText[[n]]$fileDesc\n        nGram\n      }),\n      nGrams = lapply(seq_along(quadGrams), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$validationCorpora, 'beta', 'nGrams')\n        nGram$objName <- quadGrams[[n]]$objName\n        nGram$fileName <- quadGrams[[n]]$fileName\n        nGram$fileDesc <- quadGrams[[n]]$fileDesc\n        nGram\n      })\n    ),\n    gamma = list(\n      corpusName = 'Validation Set Gamma',\n      directory = file.path(directories$validationCorpora, 'gamma'),\n      fileName = 'validation-set-gamma',\n      objName = 'validationSetGamma',\n      documents = lapply(seq_along(registers), function(r) {\n        d <- list()\n        d$directory <- file.path(directories$validationCorpora, 'gamma', 'documents')\n        d$fileName <- registers[[r]]$fileName\n        d$fileDesc <- registers[[r]]$fileDesc\n        d$objName  <- registers[[r]]$objName\n        d\n      }),\n      processed = lapply(seq_along(quadGramText), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$validationCorpora, 'gamma', 'processed')\n        nGram$objName <- quadGramText[[n]]$objName\n        nGram$fileName <- quadGramText[[n]]$fileName\n        nGram$fileDesc <- quadGramText[[n]]$fileDesc\n        nGram\n      }),\n      nGrams = lapply(seq_along(quadGrams), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$validationCorpora, 'gamma', 'nGrams')\n        nGram$objName <- quadGrams[[n]]$objName\n        nGram$fileName <- quadGrams[[n]]$fileName\n        nGram$fileDesc <- quadGrams[[n]]$fileDesc\n        nGram\n      })\n    ),\n    delta = list(\n      corpusName = 'Validation Set Delta',\n      directory = file.path(directories$validationCorpora, 'delta'),\n      fileName = 'validation-set-delta',\n      objName = 'validationSetDelta',\n      documents = lapply(seq_along(registers), function(r) {\n        d <- list()\n        d$directory <- file.path(directories$validationCorpora, 'delta', 'documents')\n        d$fileName <- registers[[r]]$fileName\n        d$fileDesc <- registers[[r]]$fileDesc\n        d$objName  <- registers[[r]]$objName\n        d\n      }),\n      processed = lapply(seq_along(quadGramText), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$validationCorpora, 'delta', 'processed')\n        nGram$objName <- quadGramText[[n]]$objName\n        nGram$fileName <- quadGramText[[n]]$fileName\n        nGram$fileDesc <- quadGramText[[n]]$fileDesc\n        nGram\n      }),\n      nGrams = lapply(seq_along(quadGrams), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$validationCorpora, 'delta', 'nGrams')\n        nGram$objName <- quadGrams[[n]]$objName\n        nGram$fileName <- quadGrams[[n]]$fileName\n        nGram$fileDesc <- quadGrams[[n]]$fileDesc\n        nGram\n      })\n    )\n  ), # end of validation\n  test = list(\n    alpha = list(\n      corpusName = 'Test Set Alpha',\n      directory = file.path(directories$testCorpora, 'alpha'),\n      fileName = 'test-set-alpha',\n      objName = 'testSetAlpha',\n      pct = 10,\n      documents = lapply(seq_along(registers), function(r) {\n        d <- list()\n        d$directory <- file.path(directories$testCorpora, 'alpha', 'documents')\n        d$fileName <- registers[[r]]$fileName\n        d$fileDesc <- registers[[r]]$fileDesc\n        d$objName  <- registers[[r]]$objName\n        d\n      }),\n      processed = lapply(seq_along(quadGramText), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$testCorpora, 'alpha', 'processed')\n        nGram$objName <- quadGramText[[n]]$objName\n        nGram$fileName <- quadGramText[[n]]$fileName\n        nGram$fileDesc <- quadGramText[[n]]$fileDesc\n        nGram\n      }),\n      nGrams = lapply(seq_along(quadGrams), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$testCorpora, 'alpha', 'nGrams')\n        nGram$objName <- quadGrams[[n]]$objName\n        nGram$fileName <- quadGrams[[n]]$fileName\n        nGram$fileDesc <- quadGrams[[n]]$fileDesc\n        nGram\n      })\n    ),\n    beta = list(\n      corpusName = 'Test Set Beta',\n      directory = file.path(directories$testCorpora, 'beta'),\n      fileName = 'test-set-beta',\n      objName = 'testSetBeta',\n      pct = 10,\n      documents = lapply(seq_along(registers), function(r) {\n        d <- list()\n        d$directory <- file.path(directories$testCorpora, 'beta', 'documents')\n        d$fileName <- registers[[r]]$fileName\n        d$fileDesc <- registers[[r]]$fileDesc\n        d$objName  <- registers[[r]]$objName\n        d\n      }),\n      processed = lapply(seq_along(quadGramText), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$testCorpora, 'beta', 'processed')\n        nGram$objName <- quadGramText[[n]]$objName\n        nGram$fileName <- quadGramText[[n]]$fileName\n        nGram$fileDesc <- quadGramText[[n]]$fileDesc\n        nGram\n      }),\n      nGrams = lapply(seq_along(quadGrams), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$testCorpora, 'beta', 'nGrams')\n        nGram$objName <- quadGrams[[n]]$objName\n        nGram$fileName <- quadGrams[[n]]$fileName\n        nGram$fileDesc <- quadGrams[[n]]$fileDesc\n        nGram\n      })\n    ),\n    gamma = list(\n      corpusName = 'Test Set Gamma',\n      directory = file.path(directories$testCorpora, 'gamma'),\n      fileName = 'test-set-gamma',\n      objName = 'testSetGamma',\n      pct = 10,\n      documents = lapply(seq_along(registers), function(r) {\n        d <- list()\n        d$directory <- file.path(directories$testCorpora, 'gamma', 'documents')\n        d$fileName <- registers[[r]]$fileName\n        d$fileDesc <- registers[[r]]$fileDesc\n        d$objName  <- registers[[r]]$objName\n        d\n      }),\n      processed = lapply(seq_along(quadGramText), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$testCorpora, 'gamma', 'processed')\n        nGram$objName <- quadGramText[[n]]$objName\n        nGram$fileName <- quadGramText[[n]]$fileName\n        nGram$fileDesc <- quadGramText[[n]]$fileDesc\n        nGram\n      }),\n      nGrams = lapply(seq_along(quadGrams), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$testCorpora, 'gamma', 'nGrams')\n        nGram$objName <- quadGrams[[n]]$objName\n        nGram$fileName <- quadGrams[[n]]$fileName\n        nGram$fileDesc <- quadGrams[[n]]$fileDesc\n        nGram\n      })\n    ),\n    delta = list(\n      corpusName = 'Test Set Delta',\n      directory = file.path(directories$testCorpora, 'delta'),\n      fileName = 'test-set-delta',\n      objName = 'testSetDelta',\n      pct = 10,\n      documents = lapply(seq_along(registers), function(r) {\n        d <- list()\n        d$directory <- file.path(directories$testCorpora, 'delta', 'documents')\n        d$fileName <- registers[[r]]$fileName\n        d$fileDesc <- registers[[r]]$fileDesc\n        d$objName  <- registers[[r]]$objName\n        d\n      }),\n      processed = lapply(seq_along(quadGramText), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$testCorpora, 'delta', 'processed')\n        nGram$objName <- quadGramText[[n]]$objName\n        nGram$fileName <- quadGramText[[n]]$fileName\n        nGram$fileDesc <- quadGramText[[n]]$fileDesc\n        nGram\n      }),\n      nGrams = lapply(seq_along(quadGrams), function(n) {\n        nGram <- list()\n        nGram$directory <- file.path(directories$testCorpora, 'delta', 'nGrams')\n        nGram$objName <- quadGrams[[n]]$objName\n        nGram$fileName <- quadGrams[[n]]$fileName\n        nGram$fileDesc <- quadGrams[[n]]$fileDesc\n        nGram\n      })\n    )\n  ) # end of test\n)# end of corpora\n\n\nlm <- list(\n  katz = list(\n    alpha = list(\n      mName = 'KatzAlpha',\n      mDesc = 'Katz Model Alpha',\n      mOrder = 4,\n      directory = file.path(directories$lm, 'katz', 'alpha'),\n      summary = list(\n        directory = file.path(directories$lm, 'katz', 'alpha'),\n        fileDesc = 'Katz N-Gram Count Summary',\n        fileName = 'katz-ngram-count-summary.Rdata',\n        objName  = 'katzNGramCountSummary'\n      ),\n      freq = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'katz', 'alpha', 'freq')\n        nGram$objName  <- paste0('katz', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('katz-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('Katz ', quadGrams[[n]]$fileDesc)\n        nGram\n      }),\n      counts = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'katz', 'alpha', 'counts')\n        nGram$objName  <- paste0('katz', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('katz-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('Katz ', quadGrams[[n]]$fileDesc)\n        nGram\n      }),\n      model = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'katz', 'alpha', 'model')\n        nGram$objName  <- paste0('katz', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('katz-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('Katz ', quadGrams[[n]]$fileDesc)\n        nGram\n      })\n    ),\n    beta = list(\n      mName = 'KatzBeta',\n      mDesc = 'Katz Model Beta',\n      mOrder = 4,\n      directory = file.path(directories$lm, 'katz', 'beta'),\n      summary = list(\n        directory = file.path(directories$lm, 'katz', 'beta'),\n        fileDesc = 'Katz N-Gram Count Summary',\n        fileName = 'katz-ngram-count-summary.Rdata',\n        objName  = 'katzNGramCountSummary'\n      ),\n      freq = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'katz', 'beta', 'freq')\n        nGram$objName  <- paste0('katz', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('katz-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('Katz ', quadGrams[[n]]$fileDesc)\n        nGram\n      }),\n      counts = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'katz', 'beta', 'counts')\n        nGram$objName  <- paste0('katz', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('katz-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('Katz ', quadGrams[[n]]$fileDesc)\n        nGram\n      }),\n      model = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'katz', 'beta', 'model')\n        nGram$objName  <- paste0('katz', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('katz-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('Katz ', quadGrams[[n]]$fileDesc)\n        nGram\n      })\n    ),\n    gamma = list(\n      mName = 'KatzGamma',\n      mDesc = 'Katz Model Gamma',\n      mOrder = 4,\n      directory = file.path(directories$lm, 'katz', 'gamma'),\n      summary = list(\n        directory = file.path(directories$lm, 'katz', 'gamma'),\n        fileDesc = 'Katz N-Gram Count Summary',\n        fileName = 'katz-ngram-count-summary.Rdata',\n        objName  = 'katzNGramCountSummary'\n      ),\n      freq = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'katz', 'gamma', 'freq')\n        nGram$objName  <- paste0('katz', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('katz-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('Katz ', quadGrams[[n]]$fileDesc)\n        nGram\n      }),\n      counts = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'katz', 'gamma', 'counts')\n        nGram$objName  <- paste0('katz', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('katz-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('Katz ', quadGrams[[n]]$fileDesc)\n        nGram\n      }),\n      model = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'katz', 'gamma', 'model')\n        nGram$objName  <- paste0('katz', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('katz-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('Katz ', quadGrams[[n]]$fileDesc)\n        nGram\n      })\n    ),\n    delta = list(\n      mName = 'KatzDelta',\n      mDesc = 'Katz Model Delta',\n      mOrder = 4,\n      directory = file.path(directories$lm, 'katz', 'delta'),\n      summary = list(\n        directory = file.path(directories$lm, 'katz', 'delta'),\n        fileDesc = 'Katz N-Gram Count Summary',\n        fileName = 'katz-ngram-count-summary.Rdata',\n        objName  = 'katzNGramCountSummary'\n      ),\n      freq = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'katz', 'delta', 'freq')\n        nGram$objName  <- paste0('katz', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('katz-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('Katz ', quadGrams[[n]]$fileDesc)\n        nGram\n      }),\n      counts = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'katz', 'delta', 'counts')\n        nGram$objName  <- paste0('katz', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('katz-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('Katz ', quadGrams[[n]]$fileDesc)\n        nGram\n      }),\n      model = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'katz', 'delta', 'model')\n        nGram$objName  <- paste0('katz', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('katz-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('Katz ', quadGrams[[n]]$fileDesc)\n        nGram\n      })\n    )\n  ),# end of katz\n  mkn = list(\n    alpha = list(\n      mName = 'MKNAlpha',\n      mDesc = 'MKN Model Alpha',\n      mOrder = 4,\n      directory = file.path(directories$lm, 'mkn', 'alpha'),\n      summary = list(\n        directory = file.path(directories$lm, 'mkn', 'alpha'),\n        fileDesc = 'MKN N-Gram Count Summary',\n        fileName = 'mkn-ngram-count-summary.Rdata',\n        objName  = 'mknNGramCountSummary'\n      ),\n      discounts = list(\n        directory = file.path(directories$lm, 'mkn', 'alpha'),\n        fileDesc = 'MKN Discounts',\n        fileName = 'mkn-discounts.Rdata',\n        objName  = 'mknDiscounts'\n      ),\n      counts = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'mkn', 'alpha', 'counts')\n        nGram$objName  <- paste0('mkn', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('mkn-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('MKN ', quadGrams[[n]]$fileDesc)\n        nGram\n      }),\n      model = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'mkn', 'alpha', 'model')\n        nGram$objName  <- paste0('mkn', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('mkn-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('MKN ', quadGrams[[n]]$fileDesc)\n        nGram\n      })\n    ),\n    beta = list(\n      mName = 'MKNBeta',\n      mDesc = 'MKN Model Beta',\n      mOrder = 4,\n      directory = file.path(directories$lm, 'mkn', 'beta'),\n      summary = list(\n        directory = file.path(directories$lm, 'mkn', 'beta'),\n        fileDesc = 'MKN N-Gram Count Summary',\n        fileName = 'mkn-ngram-count-summary.Rdata',\n        objName  = 'mknNGramCountSummary'\n      ),\n      discounts = list(\n        directory = file.path(directories$lm, 'mkn', 'beta'),\n        fileDesc = 'MKN Discounts',\n        fileName = 'mkn-discounts.Rdata',\n        objName  = 'mknDiscounts'\n      ),\n      counts = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'mkn', 'beta', 'counts')\n        nGram$objName  <- paste0('mkn', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('mkn-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('MKN ', quadGrams[[n]]$fileDesc)\n        nGram\n      }),\n      model = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'mkn', 'beta', 'model')\n        nGram$objName  <- paste0('mkn', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('mkn-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('MKN ', quadGrams[[n]]$fileDesc)\n        nGram\n      })\n    ),\n    gamma = list(\n      mName = 'MKNGamma',\n      mDesc = 'MKN Model Gamma',\n      mOrder = 4,\n      directory = file.path(directories$lm, 'mkn', 'gamma'),\n      summary = list(\n        directory = file.path(directories$lm, 'mkn', 'gamma'),\n        fileDesc = 'MKN N-Gram Count Summary',\n        fileName = 'mkn-ngram-count-summary.Rdata',\n        objName  = 'mknNGramCountSummary'\n      ),\n      discounts = list(\n        directory = file.path(directories$lm, 'mkn', 'gamma'),\n        fileDesc = 'MKN Discounts',\n        fileName = 'mkn-discounts.Rdata',\n        objName  = 'mknDiscounts'\n      ),\n      counts = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'mkn', 'gamma', 'counts')\n        nGram$objName  <- paste0('mkn', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('mkn-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('MKN ', quadGrams[[n]]$fileDesc)\n        nGram\n      }),\n      model = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'mkn', 'gamma', 'model')\n        nGram$objName  <- paste0('mkn', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('mkn-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('MKN ', quadGrams[[n]]$fileDesc)\n        nGram\n      })\n    ),\n    delta = list(\n      mName = 'MKNDelta',\n      mDesc = 'MKN Model Delta',\n      mOrder = 4,\n      directory = file.path(directories$lm, 'mkn', 'delta'),\n      summary = list(\n        directory = file.path(directories$lm, 'mkn', 'delta'),\n        fileDesc = 'MKN N-Gram Count Summary',\n        fileName = 'mkn-ngram-count-summary.Rdata',\n        objName  = 'mknNGramCountSummary'\n      ),\n      discounts = list(\n        directory = file.path(directories$lm, 'mkn', 'delta'),\n        fileDesc = 'MKN Discounts',\n        fileName = 'mkn-discounts.Rdata',\n        objName  = 'mknDiscounts'\n      ),\n      counts = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'mkn', 'delta', 'counts')\n        nGram$objName  <- paste0('mkn', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('mkn-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('MKN ', quadGrams[[n]]$fileDesc)\n        nGram\n      }),\n      model = lapply(seq_along(quadGrams), function(n) {\n        nGram = list()\n        nGram$directory <- file.path(directories$lm, 'mkn', 'delta', 'model')\n        nGram$objName  <- paste0('mkn', quadGrams[[n]]$fileDesc)\n        nGram$fileName <- paste0('mkn-', quadGrams[[n]]$fileName)\n        nGram$fileDesc <- paste0('MKN ', quadGrams[[n]]$fileDesc)\n        nGram\n      })\n    )\n  )# end of mkn\n)\n\ndependencies <- list(\n  rPackages = list('data.table', 'doParallel', 'fastmatch', 'kfigr', 'knitr',\n                   'ggplot2', 'ggthemes', 'gridExtra', 'lsa', 'languageR', 'jpeg',\n                   'qdapDictionaries', 'qdapRegex', 'qdapTools', 'qdap',\n                   'NLP', 'openNLP', 'pbapply', 'plotly', 'quanteda', 'RCurl', \n                   'reshape2', 'stringr', 'tools', 'tm', 'wordcloud', 'zipfR')\n                       \n)\n## ---- end",
    "created" : 1496788396380.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2234895218",
    "id" : "F2DB825",
    "lastKnownWriteTime" : 1496791835,
    "last_content_update" : 1496791835921,
    "path" : "~/Data Science/Data Science Projects/PredictifyR-1.0/config/schema.R",
    "project_path" : "config/schema.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}