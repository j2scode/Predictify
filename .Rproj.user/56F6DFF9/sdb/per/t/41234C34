{
    "collab_server" : "",
    "contents" : "## ---- analyze_ngram_coverage_training\n\n#==============================================================================#\n#                         analyzeNGramCoverageTraining                         #\n#==============================================================================#\n#'  analyzeNGramCoverageTraining\n#' \n#' This function compares the training and validation ngrams, calculating\n#' the degree to which the validation ngrams are covered in the training \n#' data.  The analysis is conducted over the series of four training sets\n#' \n#' @param training - the meta data for the training data set\n#' @param validation - the meta data for the validation set\n#' @param directories - the project directory structure\n#' @return trainingSummary - list containing the nGram counts and the \n#'                 OOV rates for each training corpora\n#' @author John James\n#' @export\nanalyzeNGramCoverageTraining <- function(training, validation, directories) {\n  \n  startTime <- Sys.time()\n  message(paste('\\n...Analyzing', training$corpusName, 'NGram Coverage at', startTime))\n  \n  message(paste('...loading', training$corpusName))\n  trainingData <- unlist(lapply(seq_along(training$documents), function(d) {\n    readFile(training$documents[[d]])\n  }))\n  \n  message(paste('...loading', validation$corpusName))\n  valData <- unlist(lapply(seq_along(validation$documents), function(d) {\n    readFile(validation$documents[[d]])\n  }))\n  \n  coverage <- rbindlist(lapply(seq_along(training$nGrams), function(n) {\n    \n    gc()\n  \n    message(paste('......tokenizing', training$corpusName, \n                  training$nGrams[[n]]$fileDesc))\n    trainingNGrams <- quanteda::tokenize(trainingData, what = 'word', ngrams = n)\n\n    message(paste('......tokenizing Validation Set', \n                  training$nGrams[[n]]$fileDesc))\n    validationNGrams <- quanteda::tokenize(valData, what = 'word', ngrams = n)\n    \n    message('......extracting vocabularies')\n    validationV <- unique(validationNGrams)\n    trainingV <- unique(trainingNGrams)\n    \n    message('......calculating VOOV')\n    vOOV <- length(validationV) - sum(validationV %in% trainingV)\n    \n    message('......calculating NOOV')\n    nOOV <- length(validationNGrams) - sum(validationNGrams %in% trainingNGrams)\n    \n    message('......summarizing results')\n    oovData <- list()\n    oovData$tSet  <- training$corpusName\n    oovData$vTraining <- length(trainingV)\n    oovData$nTraining <- length(trainingNGrams)\n    oovData$vValidation <- length(validationV)\n    oovData$nValidation <- length(validationNGrams)\n    oovData$nValidation <- length(trainingNGrams)\n    oovData$vOOV <- vOOV\n    oovData$nOOV <- nOOV\n    oovData$vOOVRate <- vOOV / oovData$vValidation\n    oovData$nOOVRate <- nOOV / oovData$nValidation\n    oovData$coverage <- (1 - oovData$nOOVRate) * 100\n    oovData\n  }))  \n\n  # Save Results\n  output <- list()\n  output$directory <- directories$analysisDir\n  output$fileName  <- paste0(sub('\\\\..*', '', paste0('coverage-analysis-')),\n                             paste0(training$fileName),\n                             format(Sys.time(),'_%Y%m%d_%H%M%S'), '.Rdata')\n  output$objName   <- paste0(training$objName, 'CoverageAnalysis')\n  output$data  <- coverage\n  saveObject(output)\n  \n  # Log and Return results\n  logR(output$objName, startTime, ' ', ' ')\n  \n  # Alert User\n  endTime <- Sys.time()\n  message(paste(training$corpusName, 'Coverage Analysis Completed at', endTime))\n  message(paste('Elapsed time is', round(difftime(endTime, startTime,  units = 'auto'), 2)))\n\n  return(coverage)\n}\n## ---- end\n#coverage <- verifyVocabulary(testCorpus, )",
    "created" : 1495199459073.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2331537951",
    "id" : "41234C34",
    "lastKnownWriteTime" : 1495218326,
    "last_content_update" : 1495218326199,
    "path" : "~/Data Science/Data Science Projects/PredictifyR-1.0/src/D4.analyzeNGramCoverageTraining.R",
    "project_path" : "src/D4.analyzeNGramCoverageTraining.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}