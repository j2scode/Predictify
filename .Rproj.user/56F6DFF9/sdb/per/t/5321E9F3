{
    "collab_server" : "",
    "contents" : "## ---- katz_evaluate\n#==============================================================================#\n#                                 katzEvaluate                                 #\n#==============================================================================#\n#'  katzEvaluate\n#' \n#' This function evaluates a test set on the katz-backoff model, \n#' returning a data frame containing model size data, processing time, and \n#' perplexity scores. \n#' \n#' @param katz - the meta data for the language model\n#' @param training - the meta data for the training corpus\n#' @param test - the meta data for the validation or test corpus\n#' @param sents - the number of sentences from the test data to evaluate, \n#'                NULL = all sentences\n#' @param directories - the project directory structure\n#' @return estimates - the probability estimates for each word in the test data\n#' @author John James\n#' @export\nkatzEvaluate <- function(katz, training, test, sents = NULL, directories) {\n  \n  memory.limit(20000)\n  startTime <- Sys.time()\n  message(paste(\"\\nEvaluating performance on \", katz$mDesc, 'at', startTime))\n  \n  \n  # Function that performs the quadgram probability estimate \n  backoff <- function(ngram, n) {\n    \n    # Format context (prefix) and suffix (tail) for scoring\n    prefix <- gsub(regex$context[[n]], \"\\\\1\", ngram, perl = TRUE)\n    tail <- gsub(regex$suffix[[n]], \"\\\\1\", ngram, perl = TRUE)\n    \n    # Get katz probabiity for tail of n+1 gram, if it exists\n    pKatz <- model[[n+1]][suffix == tail, pKatzSuffix, by = suffix]$pKatzSuffix[1]\n    \n    # Get Alpha based upon context of n+1 gram\n    alpha <- model[[n+1]][context == prefix, alpha, by = context]$alpha[1]\n    \n    # If data found, return alpha * pkatz\n    if (!is.na(alpha) & !is.na(pKatz)) {\n      return(alpha * pKatz)\n    } else {\n      \n      # If data doesn't exist and ngram order > 1, backoff\n      if (n > 1 ) {\n        return(backoff(tail, n-1))\n      } else {\n        \n        # If the context isn'f found, get alpha for the unknown word \n        if (is.na(alpha)) {\n          alpha <- model[[n+1]][context == 'UNK', alpha, by = context]$alpha[1]\n        }\n        \n        # If the suffix isn'f found, get probability of the unknown word\n        if (is.na(pKatz)) {\n          pKatz <- model[[n+1]][suffix == 'UNK', pKatzSuffix, by = suffix]$pKatzSuffix[1]\n        }\n        return(alpha * pKatz)\n      }\n    }\n  }\n    \n  # Score nGram\n  score <- function(ngram, n) {\n    \n    # Check if nGram exists and return probability\n    s <- model[[n]][ nGram == ngram, pKatzNGram]\n    \n    if (length(s) > 0 ) {\n      return(s)\n    } else {\n      return(backoff(ngram, n-1))\n    }\n  }\n\n  \n  scoreSentence <- function(sentence) {\n    tokens <- unlist(quanteda::tokenize(sentence, what = 'word'))\n    rbindlist(lapply(seq_along(tokens[1:(length(tokens)-3)]), function(x) {\n      ngram <- paste0(tokens[x:(x+3)], collapse = ' ')\n      sentScore <- list()\n      sentScore$quadgram <- ngram\n      sentScore$prob <- score(ngram, katz$mOrder)\n      sentScore$logProb <- log2(sentScore$prob)\n      sentScore\n    }))\n  }\n  \n  message(paste('...loading language model'))\n  model <- lapply(seq_along(katz$model), function(x) {\n    loadObject(katz$model[[x]])\n  })\n\n  message(paste('...loading test data'))\n  document <- readFile(test)\n  if (!(is.null(sents))) {\n    document <- sampleData(document, numChunks = sents, chunkSize = 1, format = 'v')\n  }\n  # Compute number of sentences and tokens w/o 'BOS'\n  M <- length(document) # M = number of sentences\n\n  message('...evaluating sentence probabilities')\n  scores <- rbindlist(lapply(seq_along(document), function(x) {\n    s <- scoreSentence(document[x])\n    message(paste('\\n...',s$quadgram, 'probability is', s$prob))\n    if (x %in% c(100, 200, 500, 1000, 5000, 10000, 20000)) { \n      elapsed <- round(difftime(Sys.time(), startTime,  units = 'mins'))\n      elapsed <- as.numeric(elapsed) + 1\n      rate <- x / elapsed \n      remaining <- length(document) - x\n      timeMin <- round(remaining / rate, digits = 1)\n      timeHrs <- round(timeMin / 60, digits = 1)\n      message(paste('......',x,'out of',length(document), 'sentences processed in', \n                    elapsed, 'minutes.', timeMin,'minutes remaining (', timeHrs, 'hours)'))\n    }\n    s\n  }))\n  \n\n  # Compute perplexity\n  N <- length(scores$logProb)\n  pp <- 2^-(sum(scores$logProb) / N)\n  \n  # Note the time\n  endTime <- Sys.time()\n  duration <- round(difftime(endTime, startTime,  units = 'auto'), 2)\n  \n  # Summarize results\n  evaluation <- list(\n    summary = list(\n      date = startTime,\n      end = endTime,\n      duration = duration,\n      model = katz$mDesc,\n      #trainingSet = training$corpusName,\n      #trainingSents = length(train),\n      #trainingTokens = trainTokens,\n      #trainingSize = object.size(train),\n      modelSize = object.size(model),\n      testSents = M,\n      testWords = N,\n      perplexity = pp\n    ),\n    detail = scores\n  )\n  \n  # Save Analysis\n  output <- list()\n  output$directory <- directories$analysisDir\n  output$fileName  <- paste0(sub('\\\\..*', '', paste0('Katz-evaluation-')),\n                             katz$mName,\n                             format(Sys.time(),'_%Y%m%d_%H%M%S'), '.Rdata')\n  output$objName   <- 'evaluation'\n  output$data  <- evaluation\n  saveObject(output)\n  \n  # Log and Return results\n  logR('katzEvaluate', startTime, '', ' ')\n\n  # Alert User\n  message(paste('Katz model evaluated at', endTime))\n  message(paste('Elapsed time is', duration))\n\n  return(evaluation)\n}\n## ---- end\n#ppd <- katzEvaluate(lm$katz$delta, corpora$training$delta,  corpora$validation$delta, sents = NULL, directories)",
    "created" : 1497071762635.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "347986108",
    "id" : "5321E9F3",
    "lastKnownWriteTime" : 1497113089,
    "last_content_update" : 1497113089412,
    "path" : "~/Data Science/Data Science Projects/PredictifyR-1.0/src/LM16.katzEvaluate.R",
    "project_path" : "src/LM16.katzEvaluate.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}